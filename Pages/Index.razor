@using SmiteTools.Models
@using SmiteTools.Components
@using Newtonsoft.Json
@using System.Diagnostics;
@inject HttpClient Http

@page "/"

<div class="pane">
    <button class="gm-btn btn-elevated">Elevated</button>
    <button class="gm-btn btn-filled">Filled</button>
    <button class="gm-btn btn-outlined">Outlined</button>
    <button class="gm-btn btn-flush">Text</button>
    <button class="gm-btn btn-ico"><i class="fas fa-check"/></button>
</div>

<div class="flex-wrap p-3 pane">
    <CombatSimulation />
</div>

<div class="flex-wrap p-3 pane">
    <StatSheet
        Items=@_loadout
        />
</div>

<div class="flex-wrap p-3 pane">
    @foreach (Item item in _loadout)
    {
        <GridCell 
            Name=@item.Name
            IconUrl=@item.IconUrl
            OnClick=@(() => RemoveFromLoadout(item))
            />
    }
</div>

<hr />

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-wrap p-1 pane">
        @foreach (Item item in _items.Where(i => i.ActiveFlag == "y" && i.Type == "Item").OrderBy(i => i.ItemId))
        {
            <GridCell
                Name=@item.Name
                IconUrl=@item.IconUrl
                OnClick=@(() => AddToLoadout(item))
                />
        }
    </div>
}

@code
{
    private List<Item> _items;
    private List<Item> _loadout = new()
    {
        Capacity = 6
    };

    protected override async Task OnInitializedAsync()
    {
        string itemFile = "data/items.json";
        _items = (await Http.GetFromJsonAsync<List<Item>>(itemFile)).ToList();
    }

    public void AddToLoadout(Item item)
    {
        if (_loadout.Count >= 6)
        {
            return;
        }

        if(_loadout.Contains(item))
        {
            return;
        }

        if (item.StartingItem && _loadout.Where(i => i.StartingItem).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemTier == 4).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemId == item.ChildItemId).Any())
        {
            return;
        }

        _loadout.Add(item);
        _items.Remove(item);
        StateHasChanged();
    }

    public void RemoveFromLoadout(Item item)
    {
        if (_loadout.Remove(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }
}
