@page "/randomizer"
@using MudBlazor
@using SmiteCommon.Models.Gods;
@using SmiteCommon.Models.Items;
@using SmiteCommon.Models;
@using SmiteTools.Components
@using SmiteTools.Models;
@using System.Diagnostics;

@namespace SmiteTools.Pages
@inherits ComponentBase 

<PageTitle>Randomizer</PageTitle>

@Component

@code {
    public RenderFragment Component => __builder =>
    {
        <MudItem Class="d-flex flex-column flex-grow-1 gap-4 align-center">
            <MudItem Class="cursor-hover" @onclick=@(() => RerollGod(Constraint))>
                <MudCard Style="width: 196px" Elevation="3">
                    <MudCardMedia Image=@_god.IconUrl Height="196" Class="rounded-top-lg" />
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Align="Align.Center">@_god.Name</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem>
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Text="Items" IsInitiallyExpanded="true">
                        <MudGrid Spacing="2" Justify="Justify.FlexStart">
                            @for (int i = 0; i < 6; i++)
                            {
                                int index = i;
                                <MudItem Class="cursor-hover" @onclick=@(() => RerollItem(index, Constraint))>
                                    <MudCard Style="width: 128px" Elevation="3">
                                        <MudCardMedia Image=@_loadout[index].IconUrl Height="128" Class="rounded-top-lg"/>
                                        <MudCardContent>
                                            <MudText Typo="Typo.body2" Align="Align.Center" Class="">@_loadout[index].Name</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Relics" IsInitiallyExpanded="true">
                        <MudGrid Spacing="2" Justify="Justify.FlexStart">
                            @for (int i = 0; i < 2; i++)
                            {
                                int index = i;

                                <MudItem Class="cursor-hover" @onclick=@(() => RerollRelic(index, Constraint))>
                                    <MudCard Style="width: 128px" Elevation="3">
                                        <MudCardMedia Image=@_relics[index].IconUrl Height="128" Class="rounded-top-lg" />
                                        <MudCardContent>
                                            <MudText Typo="Typo.body2" Align="Align.Center">@_relics[index].Name</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Stats">

                        <MudTable Items="@Stat.GetItemStats(_loadout)" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Stat</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Stat">@context.Name</MudTd>
                                <MudTd DataLabel="Value">
                                    <MudProgressLinear Color="Color.Info" Size="Size.Medium" Value=@((context.IsInteger ? context.Value / context.Maximum : context.Value / context.Maximum) * 100)>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Inherit">@(context.IsInteger ? $"{context.Value}" : $"{context.Value * 100:#.##} %")</MudText>
                                    </MudProgressLinear>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>


                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        </MudItem>

        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Cached" Label=@($"Reroll ({RemainingRerolls})") @onclick=@(() => Initialize()) Class="ma-4" Style="position: fixed; right: 0; bottom: 0" />
    };

    public RerollConstraint Constraint { get; set; } = new();
    public int StartingRerolls { get; set; } = 5;
    public int RemainingRerolls { get; set; }

    public God _god { get; set; } = new();
    public List<Item> _loadout { get; set; }

    public List<Item> _relics { get; set; } = new()
    {
        new(),
        new()
    };

    private List<God> _gods = Globals.Gods;
    private List<Item> _items = Globals.Items;

    protected override async Task OnInitializedAsync()
    {
        DateTime start = DateTime.Now;
        base.OnInitializedAsync();
        Initialize();

        Console.WriteLine($"Debug took: {DateTime.Now - start}");
    }

    public void Initialize()
    {
        RemainingRerolls = StartingRerolls;

        _loadout = new()
        {
            new(),
            new(),
            new(),
            new(),
            new(),
            new(),
        };

        _relics = new()
        {
            new(),
            new(),
        };

        RerollGod(Constraint, false);

        for (int i = 0; i < 6; i++)
        {
            RerollItem(i, Constraint, false);
        }

        for (int i = 0; i < 2; i++)
        {
            RerollRelic(i, Constraint, false);
        }

        StateHasChanged();
    }


    public void RerollGod(RerollConstraint constraint = null, bool useReroll = true)
    {
        if (RemainingRerolls <= 0)
        {
            return;
        }

        List<God> filteredGods = _gods;
        if (!filteredGods.Any())
        {
            return;
        }

        Random random = new();

        for (int i = 0; i < 100; i++)
        {
            int roll = random.Next() % (filteredGods.Count - 1);

            God god = filteredGods[roll];

            if (god.Id == _god.Id)
            {
                continue;
            }

            if(useReroll)
            {
                RemainingRerolls--;
            }

            _god = god;

            for (int j = 0; j < 6; j++)
            {
                if(!_god.CanPurchaseItem(_loadout[j]))
                {
                    RerollItem(j, Constraint, false);
                }
            }
            return;
        }

        return;
    }

    public void RerollItem(int index, RerollConstraint constraint = null, bool useReroll = true)
    {
        if(RemainingRerolls <= 0)
        {
            return;
        }

        List<Item> unevolvedItems = _items.Where(i => _items.Where(ii => ii.IsEvolved).Select(ii => ii.ChildItemId).Contains(i.ItemId)).ToList();
        List<Item> filteredItems = _items.Where(i => i.Type == "Item").Except(unevolvedItems).ToList();
        if(!filteredItems.Any())
        {
            return;
        }

        Random random = new();

        for(int i = 0; i < 100; i++)
        {
            int roll = random.Next() % (filteredItems.Count - 1);

            Item item = filteredItems[roll];

            // Restrict items based on god usability.
            if(!_god.CanPurchaseItem(item))
            {
                continue;
            }

            // Don't allow duplicate items.
            if (_loadout.ContainsItem(item))
            {
                continue;
            }

            // Limit 1 starting item.
            if(item.StartingItem && _loadout.ContainsStarterItem())
            {
                continue;
            }

            // Limit 1 acorn item.
            if (item.RootItemId == Item.MAGIC_ACORN_ID && _loadout.ContainsMagicAcornItem())
            {
                continue;
            }

            // Limit 1 glyph item.
            if (item.IsGlyph && _loadout.ContainsGlyphItem())
            {
                continue;
            }

            // Don't allow t3 of the same glyph
            if (_loadout.ContainsGlyphOfT3Item(item))
            {
                continue;
            }

            // Restrict items based on items in loadout.
            if (_loadout.ContainsEvolvedItem(item))
            {
                continue;
            }

            if(useReroll)
            {
                RemainingRerolls--;
            }

            _loadout[index] = item;
            return;
        }

        return;
    }

    public void RerollRelic(int index, RerollConstraint constraint = null, bool useReroll = true)
    {
        if (RemainingRerolls <= 0)
        {
            return;
        }

        List<Item> filteredRelics = _items.Where(i => i.Type == "Active" && i.Price > 300).ToList();
        if (!filteredRelics.Any())
        {
            return;
        }

        Random random = new();

        for (int i = 0; i < 100; i++)
        {
            int roll = random.Next() % (filteredRelics.Count - 1);

            Item item = filteredRelics[roll];

            if (_relics.ContainsRelic(item))
            {
                continue;
            }

            if (useReroll)
            {
                RemainingRerolls--;
            }

            _relics[index] = item;
            return;
        }

        return;
    }
}
