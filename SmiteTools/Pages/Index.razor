@using MudBlazor
@using SmiteCommon.Models.Gods;
@using SmiteCommon.Models.Items;
@using SmiteCommon.Models;
@using SmiteTools.Models
@using SmiteTools.Components
@using Newtonsoft.Json
@using System.Diagnostics;
@inject HttpClient Http

@page "/"

<MudItem Class="d-flex flex-column flex-grow-1 gap-4 align-center">

    <MudItem>
        <MudExpansionPanels MultiExpansion="true">
            @GodGridComponent
            @ItemGridComponent
            @LoadoutComponent
            @StatSheetComponent
@*            @CombatSimulationComponent*@
        </MudExpansionPanels>
    </MudItem>
</MudItem>

@code
{
    protected RenderFragment CombatSimulationComponent => __builder =>
    {
        <div class="flex-wrap p-3 pane blur-1">
            <CombatSimulation @ref=@CombatSimulation/>
        </div>
    };

    protected RenderFragment StatSheetComponent => __builder =>
    {
        <MudExpansionPanel Text="Stats">

            <MudTable Items="@Stat.GetItemStats(_loadout)" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Stat</MudTh>
                <MudTh>Value</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Stat">@context.Name</MudTd>
                <MudTd DataLabel="Value">
                    <MudProgressLinear Color="Color.Info" Size="Size.Medium" Value=@((context.IsInteger ? context.Value / context.Maximum : context.Value / context.Maximum) * 100)>
                        <MudText Typo="Typo.subtitle1" Color="Color.Inherit">@(context.IsInteger ? $"{context.Value}" : $"{context.Value * 100:#.##} %")</MudText>
                        </MudProgressLinear>
                    </MudTd>
                </RowTemplate>
            </MudTable>

        </MudExpansionPanel>
    };

    protected RenderFragment LoadoutComponent => __builder =>
    {
        <MudExpansionPanel Text="Loadout" IsInitiallyExpanded="true">
            <MudGrid Spacing="1" Justify="Justify.FlexStart">
                @foreach (Item item in _loadout)
                {
                    <MudItem Class="cursor-hover" @onclick=@(() => RemoveFromLoadout(item))>
                        <MudCard Style="width: 128px" Elevation="3">
                            <MudCardMedia Image=@item.IconUrl Height="128" Class="rounded-top-lg" />
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Align="Align.Center">@item.Name</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudExpansionPanel>
    };

    protected RenderFragment GodGridComponent => __builder =>
    {
        if(_gods != null)
        {
            <MudExpansionPanel Text="Gods">
                <MudGrid Spacing="1" Justify="Justify.FlexStart">
                    @foreach (God god in Globals.Gods)
                    {
                        <MudItem Class="cursor-hover" >
                            <MudCard Style="width: 128px" Elevation="3">
                                <MudCardMedia Image=@god.IconUrl Height="128" Class="rounded-top-lg" />
                                <MudCardContent>
                                    <MudText Typo="Typo.body2" Align="Align.Center">@god.Name</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudExpansionPanel>
        }
    };

    protected RenderFragment ItemGridComponent => __builder =>
    {
        if (_items != null)
        {
            <MudExpansionPanel Text="Items">
                <MudGrid Spacing="1" Justify="Justify.FlexStart">
                    @foreach (Item item in Globals.Items.Where(i => i.Type == "Item"))
                    {
                        <MudItem Class="cursor-hover" @onclick=@(() => AddToLoadout(item))>
                            <MudCard Style="width: 128px" Elevation="3">
                                <MudCardMedia Image=@item.IconUrl Height="128" Class="rounded-top-lg" />
                                <MudCardContent>
                                    <MudText Typo="Typo.body2" Align="Align.Center">@item.Name</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudExpansionPanel>
        }
    };

    private List<Item> _items;
    private List<God> _gods;
    private List<Item> _loadout = new()
    {
        Capacity = 6
    };

    public StatSheet StatSheet { get; set; }
    public CombatSimulation CombatSimulation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _gods = (await Http.GetFromJsonAsync<List<God>>("data/gods.json")).ToList();
        _items = (await Http.GetFromJsonAsync<List<Item>>("data/items.json")).ToList();
    }

    public void AddToLoadout(Item item)
    {
        if (_loadout.Count >= 6)
        {
            return;
        }

        if(_loadout.Contains(item))
        {
            return;
        }

        if (item.StartingItem && _loadout.Where(i => i.StartingItem).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemTier == 4).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemId == item.ChildItemId).Any())
        {
            return;
        }

        _loadout.Add(item);
        _items.Remove(item);

        //StatSheet.Update();
    }

    public void RemoveFromLoadout(Item item)
    {
        if (_loadout.Remove(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }
}
