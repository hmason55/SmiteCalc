@using SmiteCommon.Models.Gods;
@using SmiteCommon.Models.Items;
@using SmiteTools.Models
@using SmiteTools.Components
@using Newtonsoft.Json
@using System.Diagnostics;
@inject HttpClient Http
@inject IJSRuntime JS

@page "/"

<div class="pane blur-1">
    <button class="gm-btn btn-elevated">Elevated</button>
    <button class="gm-btn btn-filled">Filled</button>
    <button class="gm-btn btn-outlined">Outlined</button>
    <button class="gm-btn btn-flush">Text</button>
    <button class="gm-btn btn-ico"><i class="fas fa-check"/></button>
</div>

@GodGridComponent
@ItemGridComponent
@LoadoutComponent
@StatSheetComponent
@CombatSimulationComponent

@code
{
    protected RenderFragment CombatSimulationComponent => __builder =>
    {
        <div class="flex-wrap p-3 pane blur-1">
            <CombatSimulation @ref=@CombatSimulation/>
        </div>
    };

    protected RenderFragment StatSheetComponent => __builder =>
    {
        <div class="flex-wrap p-3 pane blur-1">
            <StatSheet Items=@_loadout @ref=@StatSheet />
        </div>
    };

    protected RenderFragment LoadoutComponent => __builder =>
    {
        <div class="d-flex flex-wrap p-3 pane blur-1">
            @foreach (Item item in _loadout)
            {
                <GridCell Name=@item.Name
                    IconUrl=@item.IconUrl.ToStaticResource()
                    OnClick=@(() => RemoveFromLoadout(item)) />
            }
        </div>
    };

    protected RenderFragment GodGridComponent => __builder =>
    {
        if(_gods != null)
        {
            <div class="d-flex flex-wrap p-3 pane">
                @foreach (God god in Globals.Gods)
                {
                    string uri = god.IconUrl.ToStaticResource();
                    Console.WriteLine(uri);

                    <GridCell Name=@god.Name
                          IconUrl=@uri
                           />
                }
            </div>
        }
    };

    protected RenderFragment ItemGridComponent => __builder =>
    {
        if (_items != null)
        {
            <div class="d-flex flex-wrap p-3 pane">
                @foreach (Item item in Globals.Items.Where(i => i.Type == "Item"))
                {
                    string uri = item.IconUrl.ToStaticResource();
                    Console.WriteLine(uri);

                    <GridCell Name=@item.Name
                          IconUrl=@uri
                          OnClick=@(() => AddToLoadout(item)) />
                }
            </div>
        }
    };

    private List<Item> _items;
    private List<God> _gods;
    private List<Item> _loadout = new()
    {
        Capacity = 6
    };

    public StatSheet StatSheet { get; set; }
    public CombatSimulation CombatSimulation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string uri = Http.BaseAddress.ToString();
        Console.WriteLine($"BaseAddress: {uri}");
        _gods = (await Http.GetFromJsonAsync<List<God>>("data/gods.json")).ToList();
        _items = (await Http.GetFromJsonAsync<List<Item>>("data/items.json")).ToList();
    }

    public void AddToLoadout(Item item)
    {
        if (_loadout.Count >= 6)
        {
            return;
        }

        if(_loadout.Contains(item))
        {
            return;
        }

        if (item.StartingItem && _loadout.Where(i => i.StartingItem).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemTier == 4).Any())
        {
            return;
        }

        if (item.ItemTier == 4 && _loadout.Where(i => i.ItemId == item.ChildItemId).Any())
        {
            return;
        }

        _loadout.Add(item);
        _items.Remove(item);

        StatSheet.Render();
    }

    public void RemoveFromLoadout(Item item)
    {
        if (_loadout.Remove(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }
}
